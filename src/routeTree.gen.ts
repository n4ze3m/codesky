/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as URepoImport } from './routes/u.$repo'
import { Route as URepoIndexImport } from './routes/u/$repo/index'
import { Route as PostRepoCidImport } from './routes/post.$repo.$cid'

// Create Virtual Routes

const LoginLazyImport = createFileRoute('/login')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const URepoLikeLazyImport = createFileRoute('/u/$repo/like')()

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const URepoRoute = URepoImport.update({
  id: '/u/$repo',
  path: '/u/$repo',
  getParentRoute: () => rootRoute,
} as any)

const URepoIndexRoute = URepoIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => URepoRoute,
} as any)

const URepoLikeLazyRoute = URepoLikeLazyImport.update({
  id: '/like',
  path: '/like',
  getParentRoute: () => URepoRoute,
} as any).lazy(() => import('./routes/u/$repo/like.lazy').then((d) => d.Route))

const PostRepoCidRoute = PostRepoCidImport.update({
  id: '/post/$repo/$cid',
  path: '/post/$repo/$cid',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/u/$repo': {
      id: '/u/$repo'
      path: '/u/$repo'
      fullPath: '/u/$repo'
      preLoaderRoute: typeof URepoImport
      parentRoute: typeof rootRoute
    }
    '/post/$repo/$cid': {
      id: '/post/$repo/$cid'
      path: '/post/$repo/$cid'
      fullPath: '/post/$repo/$cid'
      preLoaderRoute: typeof PostRepoCidImport
      parentRoute: typeof rootRoute
    }
    '/u/$repo/like': {
      id: '/u/$repo/like'
      path: '/like'
      fullPath: '/u/$repo/like'
      preLoaderRoute: typeof URepoLikeLazyImport
      parentRoute: typeof URepoImport
    }
    '/u/$repo/': {
      id: '/u/$repo/'
      path: '/'
      fullPath: '/u/$repo/'
      preLoaderRoute: typeof URepoIndexImport
      parentRoute: typeof URepoImport
    }
  }
}

// Create and export the route tree

interface URepoRouteChildren {
  URepoLikeLazyRoute: typeof URepoLikeLazyRoute
  URepoIndexRoute: typeof URepoIndexRoute
}

const URepoRouteChildren: URepoRouteChildren = {
  URepoLikeLazyRoute: URepoLikeLazyRoute,
  URepoIndexRoute: URepoIndexRoute,
}

const URepoRouteWithChildren = URepoRoute._addFileChildren(URepoRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/login': typeof LoginLazyRoute
  '/u/$repo': typeof URepoRouteWithChildren
  '/post/$repo/$cid': typeof PostRepoCidRoute
  '/u/$repo/like': typeof URepoLikeLazyRoute
  '/u/$repo/': typeof URepoIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/login': typeof LoginLazyRoute
  '/post/$repo/$cid': typeof PostRepoCidRoute
  '/u/$repo/like': typeof URepoLikeLazyRoute
  '/u/$repo': typeof URepoIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/login': typeof LoginLazyRoute
  '/u/$repo': typeof URepoRouteWithChildren
  '/post/$repo/$cid': typeof PostRepoCidRoute
  '/u/$repo/like': typeof URepoLikeLazyRoute
  '/u/$repo/': typeof URepoIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/u/$repo'
    | '/post/$repo/$cid'
    | '/u/$repo/like'
    | '/u/$repo/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/post/$repo/$cid'
    | '/u/$repo/like'
    | '/u/$repo'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/login'
    | '/u/$repo'
    | '/post/$repo/$cid'
    | '/u/$repo/like'
    | '/u/$repo/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  URepoRoute: typeof URepoRouteWithChildren
  PostRepoCidRoute: typeof PostRepoCidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  URepoRoute: URepoRouteWithChildren,
  PostRepoCidRoute: PostRepoCidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/login",
        "/u/$repo",
        "/post/$repo/$cid"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/u/$repo": {
      "filePath": "u.$repo.tsx",
      "children": [
        "/u/$repo/like",
        "/u/$repo/"
      ]
    },
    "/post/$repo/$cid": {
      "filePath": "post.$repo.$cid.tsx"
    },
    "/u/$repo/like": {
      "filePath": "u/$repo/like.lazy.tsx",
      "parent": "/u/$repo"
    },
    "/u/$repo/": {
      "filePath": "u/$repo/index.tsx",
      "parent": "/u/$repo"
    }
  }
}
ROUTE_MANIFEST_END */
